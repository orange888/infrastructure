---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
spec:
  allowPrivilegeEscalation: false
  allowedHostPaths:
  - pathPrefix: /etc
    readOnly: true
  - pathPrefix: /data
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - configMap
  - persistentVolumeClaim
  - emptyDir
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
spec:
  allowPrivilegeEscalation: false
  allowedHostPaths: []
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - secret
---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
spec:
  allowPrivilegeEscalation: false
  allowedHostPaths:
  - pathPrefix: /proc
    readOnly: true
  - pathPrefix: /sys
    readOnly: true
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: true
  hostPorts:
  - max: 65535
    min: 1
  privileged: false
  readOnlyRootFilesystem: false
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - configMap
  - hostPath
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
spec:
  allowPrivilegeEscalation: false
  allowedHostPaths:
  - pathPrefix: /data
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - persistentVolumeClaim
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
spec:
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - CHOWN
  allowedHostPaths:
  - pathPrefix: /etc
    readOnly: true
  - pathPrefix: /data
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: false
  readOnlyRootFilesystem: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - configMap
  - persistentVolumeClaim
  - emptyDir
  - secret
  - hostPath
---
apiVersion: v1
data:
  alertmanager.yml: "global: {}\nreceivers:\n- name: default-receiver\nroute:\n  group_interval:\
    \ 5m\n  group_wait: 10s\n  receiver: default-receiver\n  repeat_interval: 3h\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
---
apiVersion: v1
data:
  alerts: "{}\n"
  groups: "- name: Instances\n  rules:\n  - alert: InstanceDown\n    annotations:\n\
    \      description: '{{ $labels.instance }} of job {{ $labels.job }} has been\
    \ down\n        for more than 5 minutes.'\n      summary: Instance {{ $labels.instance\
    \ }} down\n    expr: up == 0\n    for: 5m\n    labels:\n      severity: page\n"
  prometheus.yml: "global:\n  evaluation_interval: 1m\n  scrape_interval: 1m\n  scrape_timeout:\
    \ 10s\nrule_files:\n- /etc/config/rules\n- /etc/config/alerts\nscrape_configs:\n\
    - job_name: prometheus\n  static_configs:\n  - targets:\n    - localhost:9090\n\
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name:\
    \ kubernetes-apiservers\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n\
    \  - action: keep\n    regex: default;kubernetes;https\n    source_labels:\n \
    \   - __meta_kubernetes_namespace\n    - __meta_kubernetes_service_name\n    -\
    \ __meta_kubernetes_endpoint_port_name\n  scheme: https\n  tls_config:\n    ca_file:\
    \ /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify:\
    \ true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\
    \  job_name: kubernetes-nodes\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n\
    \  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement:\
    \ kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n\
    \    replacement: /api/v1/nodes/$1/proxy/metrics\n    source_labels:\n    - __meta_kubernetes_node_name\n\
    \    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file:\
    \ /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify:\
    \ true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\
    \  job_name: kubernetes-nodes-cadvisor\n  kubernetes_sd_configs:\n  - role: node\n\
    \  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n\
    \  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n\
    \  - regex: (.+)\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n \
    \   source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n\
    \  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \    insecure_skip_verify: true\n- job_name: kubernetes-service-endpoints\n  kubernetes_sd_configs:\n\
    \  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: true\n\
    \    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n\
    \  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n\
    \    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n\
    \    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label:\
    \ __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n\
    \    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n\
    \    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n\
    \  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n\
    \    target_label: kubernetes_namespace\n  - action: replace\n    source_labels:\n\
    \    - __meta_kubernetes_service_name\n    target_label: kubernetes_name\n  -\
    \ action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n\
    \    target_label: kubernetes_node\n- honor_labels: true\n  job_name: prometheus-pushgateway\n\
    \  kubernetes_sd_configs:\n  - role: service\n  relabel_configs:\n  - action:\
    \ keep\n    regex: pushgateway\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n\
    - job_name: kubernetes-services\n  kubernetes_sd_configs:\n  - role: service\n\
    \  metrics_path: /probe\n  params:\n    module:\n    - http_2xx\n  relabel_configs:\n\
    \  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n\
    \  - source_labels:\n    - __address__\n    target_label: __param_target\n  -\
    \ replacement: blackbox\n    target_label: __address__\n  - source_labels:\n \
    \   - __param_target\n    target_label: instance\n  - action: labelmap\n    regex:\
    \ __meta_kubernetes_service_label_(.+)\n  - source_labels:\n    - __meta_kubernetes_namespace\n\
    \    target_label: kubernetes_namespace\n  - source_labels:\n    - __meta_kubernetes_service_name\n\
    \    target_label: kubernetes_name\n- job_name: kubernetes-pods\n  kubernetes_sd_configs:\n\
    \  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n\
    \    - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n  - action: replace\n\
    \    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n\
    \    target_label: __metrics_path__\n  - action: replace\n    regex: ([^:]+)(?::\\\
    d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n \
    \   - __meta_kubernetes_pod_annotation_prometheus_io_port\n    target_label: __address__\n\
    \  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action:\
    \ replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label:\
    \ kubernetes_namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n\
    \    target_label: kubernetes_pod_name\n\nalerting:\n  alertmanagers:\n  - kubernetes_sd_configs:\n\
    \      - role: pod\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\
    \    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\
    \    relabel_configs:\n    - source_labels: [__meta_kubernetes_namespace]\n  \
    \    regex: monitoring\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_label_app]\n\
    \      regex: prometheus\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_label_component]\n\
    \      regex: alertmanager\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_container_port_number]\n\
    \      regex:\n      action: drop\n"
  rules: "{}\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
rules:
- apiGroups:
  - extensions
  resourceNames:
  - prometheus-alertmanager
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
rules:
- apiGroups:
  - extensions
  resourceNames:
  - prometheus-kube-state-metrics
  resources:
  - podsecuritypolicies
  verbs:
  - use
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - persistentvolumeclaims
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - endpoints
  - secrets
  - configmaps
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - ingresses
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
rules:
- apiGroups:
  - extensions
  resourceNames:
  - prometheus-pushgateway
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
rules:
- apiGroups:
  - extensions
  resourceNames:
  - prometheus-server
  resources:
  - podsecuritypolicies
  verbs:
  - use
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  - ingresses
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-alertmanager
subjects:
- kind: ServiceAccount
  name: prometheus-alertmanager
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: prometheus-kube-state-metrics
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-pushgateway
subjects:
- kind: ServiceAccount
  name: prometheus-pushgateway
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
rules:
- apiGroups:
  - extensions
  resourceNames:
  - prometheus-node-exporter
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-node-exporter
subjects:
- kind: ServiceAccount
  name: prometheus-node-exporter
  namespace: monitoring
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9093
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/instance: prometheus
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
    app.kubernetes.io/instance: prometheus
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9100
    protocol: TCP
    targetPort: 9100
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
    app.kubernetes.io/instance: prometheus
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
spec:
  ports:
  - name: http
    port: 9091
    protocol: TCP
    targetPort: 9091
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
    app.kubernetes.io/instance: prometheus
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: prometheus
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: node-exporter
  name: prometheus-node-exporter
  namespace: monitoring
  annotations:
    fluxcd.io/automated: 'true'
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: node-exporter
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        chart: prometheus-9.1.0
        app.kubernetes.io/component: node-exporter
        heritage: Tiller
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        image: prom/node-exporter:v0.18.0
        imagePullPolicy: IfNotPresent
        name: prometheus-node-exporter
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: metrics
        resources:
          limits:
            cpu: 200m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 30Mi
        volumeMounts:
        - mountPath: /host/proc
          name: proc
          readOnly: true
        - mountPath: /host/sys
          name: sys
          readOnly: true
      hostPID: true
      serviceAccountName: prometheus-node-exporter
      volumes:
      - hostPath:
          path: /proc
        name: proc
      - hostPath:
          path: /sys
        name: sys
  updateStrategy:
    type: RollingUpdate
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: alertmanager
  name: prometheus-alertmanager
  namespace: monitoring
  annotations:
    fluxcd.io/automated: 'true'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        chart: prometheus-9.1.0
        app.kubernetes.io/component: alertmanager
        heritage: Tiller
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - args:
        - --config.file=/etc/config/alertmanager.yml
        - --storage.path=/data
        - --cluster.advertise-address=$(POD_IP):6783
        - --web.external-url=/
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: prom/alertmanager:v0.18.0
        imagePullPolicy: IfNotPresent
        name: prometheus-alertmanager
        ports:
        - containerPort: 9093
        readinessProbe:
          httpGet:
            path: /#/status
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 10m
            memory: 32Mi
          requests:
            cpu: 10m
            memory: 32Mi
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
        - mountPath: /data
          name: storage-volume
          subPath: ""
      - args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9093/-/reload
        image: jimmidyson/configmap-reload:v0.2.2
        imagePullPolicy: IfNotPresent
        name: prometheus-alertmanager-configmap-reload
        resources: {}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
          readOnly: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-alertmanager
      volumes:
      - configMap:
          name: prometheus-alertmanager
        name: config-volume
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-alertmanager
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: kube-state-metrics
  name: prometheus-kube-state-metrics
  namespace: monitoring
  annotations:
    fluxcd.io/automated: 'true'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: kube-state-metrics
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        chart: prometheus-9.1.0
        app.kubernetes.io/component: kube-state-metrics
        heritage: Tiller
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - image: quay.io/coreos/kube-state-metrics:v1.6.0
        imagePullPolicy: IfNotPresent
        name: prometheus-kube-state-metrics
        ports:
        - containerPort: 8080
          name: metrics
        resources:
          limits:
            cpu: 10m
            memory: 16Mi
          requests:
            cpu: 10m
            memory: 16Mi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-kube-state-metrics
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: pushgateway
  name: prometheus-pushgateway
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: pushgateway
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        chart: prometheus-9.1.0
        app.kubernetes.io/component: pushgateway
        heritage: Tiller
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - args:
        image: prom/pushgateway:v0.8.0
        imagePullPolicy: IfNotPresent
        name: prometheus-pushgateway
        ports:
        - containerPort: 9091
        readinessProbe:
          httpGet:
            path: /#/status
            port: 9091
          initialDelaySeconds: 10
          timeoutSeconds: 10
        resources:
          limits:
            cpu: 10m
            memory: 32Mi
          requests:
            cpu: 10m
            memory: 32Mi
        volumeMounts:
        - mountPath: /data
          name: storage-volume
          subPath: ""
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-pushgateway
      volumes:
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-pushgateway
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: server
  name: prometheus-server
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        chart: prometheus-9.1.0
        app.kubernetes.io/component: server
        heritage: Tiller
        app.kubernetes.io/instance: prometheus
    spec:
      containers:
      - args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9090/-/reload
        image: jimmidyson/configmap-reload:v0.2.2
        imagePullPolicy: IfNotPresent
        name: prometheus-server-configmap-reload
        resources: {}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
          readOnly: true
      - args:
        - --storage.tsdb.retention.time=15d
        - --config.file=/etc/config/prometheus.yml
        - --storage.tsdb.path=/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        image: prom/prometheus:v2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus-server
        ports:
        - containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
        - mountPath: /data
          name: storage-volume
          subPath: ""
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-server
      terminationGracePeriodSeconds: 300
      volumes:
      - configMap:
          name: prometheus-server
        name: config-volume
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-server
