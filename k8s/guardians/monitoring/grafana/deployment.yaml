apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: prometheus-operator-grafana
  namespace: monitoring
  labels: &labels
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prometheus-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      <<: *labels
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        <<: *labels
    spec:
      serviceAccountName: prometheus-operator-grafana
      securityContext:
        fsGroup: 472
        runAsUser: 472
      initContainers:
        - name: grafana-sc-datasources
          image: kiwigrid/k8s-sidecar:0.1.20
          imagePullPolicy: IfNotPresent
          env:
            - name: METHOD
              value: LIST
            - name: LABEL
              value: grafana.com/datasource
            - name: FOLDER
              value: /etc/grafana/provisioning/datasources
            - name: RESOURCE
              value: both
          resources: {}
          volumeMounts:
            - name: sc-datasources-volume
              mountPath: /etc/grafana/provisioning/datasources
      containers:
        - name: grafana-sc-dashboard
          image: kiwigrid/k8s-sidecar:0.1.20
          imagePullPolicy: IfNotPresent
          env:
            - name: LABEL
              value: grafana.com/dashboard
            - name: FOLDER
              value: /tmp/dashboards
            - name: RESOURCE
              value: both
          resources: {}
          volumeMounts:
            - name: sc-dashboard-volume
              mountPath: /tmp/dashboards
        - name: grafana
          image: grafana/grafana:6.3.5
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: storage
              mountPath: /var/lib/grafana
            - name: sc-dashboard-volume
              mountPath: /tmp/dashboards
            - name: sc-dashboard-provider
              mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
              subPath: provider.yaml
            - name: sc-datasources-volume
              mountPath: /etc/grafana/provisioning/datasources
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: adminUser
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: adminPassword
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: grafana
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: grafana
          resources: {}
      volumes:
        - name: config
          secret:
            secretName: grafana
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-operator-grafana
        - name: sc-dashboard-volume
          emptyDir: {}
        - name: sc-dashboard-provider
          configMap:
            name: prometheus-operator-grafana-config-dashboards
        - name: sc-datasources-volume
          emptyDir: {}
