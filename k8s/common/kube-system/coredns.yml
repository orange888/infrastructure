---
# Source: coredns/templates/podsecuritypolicy.yaml

apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # Add back CAP_NET_BIND_SERVICE so that coredns can run on port 53
  allowedCapabilities:
    - CAP_NET_BIND_SERVICE
      # Allow core volume types.
  volumes:
    - "configMap"
    - "emptyDir"
    - "projected"
    - "secret"
    - "downwardAPI"
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: "RunAsAny"
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: "RunAsAny"
  supplementalGroups:
    rule: "MustRunAs"
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: "MustRunAs"
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false

---
# Source: coredns/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
data:
  Corefile: |-
    .:53 {
        reload
        cache 30
        errors
        health
        kubernetes cluster.local
        hosts /etc/coredns/NodeHosts {
            reload 1s
            fallthrough
        }
        loadbalance round_robin
        prometheus 0.0.0.0:9153
        forward . /etc/resolv.conf
    }

---
# Source: coredns/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns

---
# Source: coredns/templates/clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coredns
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - services
      - pods
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - policy
      - extensions
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - coredns

---
# Source: coredns/templates/clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: coredns
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: coredns
subjects:
  - kind: ServiceAccount
    name: coredns
    namespace: kube-system

---
# Source: coredns/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    app.kubernetes.io/name: coredns
  ports:
    - { port: 53, protocol: UDP, name: udp-53 }
    - { port: 53, protocol: TCP, name: tcp-53 }
    - { port: 9153, protocol: TCP, name: metrics }
  type: ClusterIP
  clusterIP: 10.43.0.10

---
# Source: coredns/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: "coredns"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app.kubernetes.io/name: coredns
  annotations:
    fluxcd.io/tag.coredns: semver:~1
    fluxcd.io/automated: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: "coredns"
      k8s-app: "coredns"
      app.kubernetes.io/name: coredns
  template:
    metadata:
      labels:
        k8s-app: "coredns"
        app.kubernetes.io/name: coredns
        app.kubernetes.io/instance: "coredns"
      annotations:
        checksum/config: 780a050f363626effb302665847b42e9148cb53590877dfdf3ae96596799cf14
        scheduler.alpha.kubernetes.io/critical-pod: ""
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      serviceAccountName: coredns
      dnsPolicy: Default
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                      - coredns
              topologyKey: kubernetes.io/hostname

      containers:
        - name: coredns
          image: coredns/coredns:1.6.3
          imagePullPolicy: IfNotPresent
          args: ["-conf", "/etc/coredns/Corefile"]
          volumeMounts:
            - name: config
              mountPath: /etc/coredns
              readOnly: true
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi

          ports:
            - { containerPort: 53, protocol: UDP, name: udp-53 }
            - { containerPort: 53, protocol: TCP, name: tcp-53 }
            - { containerPort: 9153, protocol: TCP, name: metrics }

          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: config
          configMap:
            name: coredns
            items:
              - key: Corefile
                path: Corefile
              - key: NodeHosts
                path: NodeHosts
